namespace Infrastructure.Vulnerability
{
	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Text;
	using System.Xml;
	using System.Xml.XPath;

	using JetBrains.Annotations;

	using Common.Enums;

	[UsedImplicitly]
	internal sealed class XmlVulnerabilitySeverityResolver : IVulnerabilitySeverityResolver
	{
		private static IDictionary<string, VulnerabilitySeverityType> _severityMap;

		private static IDictionary<string, VulnerabilitySeverityType> SeverityMap
		{
			get
			{
				if (_severityMap != null) return _severityMap;

				_severityMap = new Dictionary<string, VulnerabilitySeverityType>();

				WarmUp();

				return _severityMap;
			}
		}

		public VulnerabilitySeverityType Resolve(string vulnerabilityType)
		{
			if (vulnerabilityType == null)
				throw new ArgumentNullException(nameof(vulnerabilityType));

			return SeverityMap.ContainsKey(vulnerabilityType)
				? SeverityMap[vulnerabilityType]
				: VulnerabilitySeverityType.Unknown;
		}

		private static void WarmUp()
		{
			var text = Encoding.UTF8.GetString(Resources.Resources.SeverityMap);
			var reader = new StringReader(text);
			var xml = new XPathDocument(reader);

			var navigator = xml.CreateNavigator();

			var ns = new XmlNamespaceManager(navigator.NameTable ?? new NameTable());

			var expression = navigator.Compile("/Map/severity");

			var iterator = navigator.Select(expression);

			foreach (XPathNavigator severityElement in iterator)
			{
				var vulnerabilityName = severityElement.GetAttribute("name", ns.DefaultNamespace);

				var severityType = severityElement.GetAttribute("severity", ns.DefaultNamespace);

				_severityMap.Add(
					vulnerabilityName,
					(VulnerabilitySeverityType) Enum.Parse(typeof(VulnerabilitySeverityType), severityType));
			}
		}
	}
}