namespace Infrastructure.Vulnerability
{
	using System.Collections.Generic;
	using System.IO;
	using System.Text;
	using System.Xml;
	using System.Xml.XPath;

	using JetBrains.Annotations;

	[UsedImplicitly]
	internal sealed class XmlVulnerabilityShortTypeResolver : IVulnerabilityShortTypeResolver
	{
		private static IDictionary<string, string> _typeMap;

		private static IDictionary<string, string> TypeMap
		{
			get
			{
				if (_typeMap != null) return _typeMap;

				_typeMap = new Dictionary<string, string>();

				WarmUp();

				return _typeMap;
			}
		}

		public string Resolve(string longType) =>
			TypeMap.ContainsKey(longType ?? string.Empty)
				? TypeMap[longType]
				: longType;

		private static void WarmUp()
		{
			var reader = new StringReader(Encoding.UTF8.GetString(Resources.Resources.TypeMap));
			var xml = new XPathDocument(reader);

			var navigator = xml.CreateNavigator();

			var ns = new XmlNamespaceManager(navigator.NameTable ?? new NameTable());

			var expression = navigator.Compile("/Map/name");

			var iterator = navigator.Select(expression);

			foreach (XPathNavigator severityElement in iterator)
			{
				var longName = severityElement.GetAttribute("long_name", ns.DefaultNamespace);

				var shortName = severityElement.GetAttribute("short_name", ns.DefaultNamespace);

				TypeMap.Add(longName, shortName);
			}
		}
	}
}