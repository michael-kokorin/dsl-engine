//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Repository.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SdlContext : DbContext
    {
        public SdlContext()
            : base("name=SdlContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Configuration> Configuration { get; set; }
        public virtual DbSet<Events> Events { get; set; }
        public virtual DbSet<Plugins> Plugins { get; set; }
        public virtual DbSet<PolicyRules> PolicyRules { get; set; }
        public virtual DbSet<Queries> Queries { get; set; }
        public virtual DbSet<QueryEntityNames> QueryEntityNames { get; set; }
        public virtual DbSet<SdlStatuses> SdlStatuses { get; set; }
        public virtual DbSet<SettingGroups> SettingGroups { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<SettingValues> SettingValues { get; set; }
        public virtual DbSet<TaskResolutions> TaskResolutions { get; set; }
        public virtual DbSet<TaskStatuses> TaskStatuses { get; set; }
        public virtual DbSet<Templates> Templates { get; set; }
        public virtual DbSet<UserInterfaces> UserInterfaces { get; set; }
        public virtual DbSet<WorkflowActions> WorkflowActions { get; set; }
        public virtual DbSet<WorkflowRules> WorkflowRules { get; set; }
        public virtual DbSet<WorkflowRuleToEvents> WorkflowRuleToEvents { get; set; }
        public virtual DbSet<Queue> Queue { get; set; }
        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<Authorities> Authorities { get; set; }
        public virtual DbSet<RoleAuthorities> RoleAuthorities { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<UserProjectSettings> UserProjectSettings { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<DbVersions> DbVersions { get; set; }
        public virtual DbSet<PackageVersions> PackageVersions { get; set; }
        public virtual DbSet<TableColumns> TableColumns { get; set; }
        public virtual DbSet<Tables> Tables { get; set; }
        public virtual DbSet<Cultures> Cultures { get; set; }
        public virtual DbSet<TagEntities> TagEntities { get; set; }
        public virtual DbSet<Tags> Tags { get; set; }
        public virtual DbSet<NotificationRules> NotificationRules { get; set; }
        public virtual DbSet<TaskResults> TaskResults { get; set; }
        public virtual DbSet<Projects> Projects { get; set; }
        public virtual DbSet<ItPluginTelemetry> ItPluginTelemetry { get; set; }
        public virtual DbSet<ProjectTelemetry> ProjectTelemetry { get; set; }
        public virtual DbSet<QueryTelemetry> QueryTelemetry { get; set; }
        public virtual DbSet<ReportTelemetry> ReportTelemetry { get; set; }
        public virtual DbSet<TaskTelemetry> TaskTelemetry { get; set; }
        public virtual DbSet<VcsPluginTelemetry> VcsPluginTelemetry { get; set; }
        public virtual DbSet<Tasks> Tasks { get; set; }
        public virtual DbSet<ScanAgents> ScanAgents { get; set; }
    
        [DbFunction("SdlContext", "GetTableColumns")]
        public virtual IQueryable<TableColumns> GetTableColumns(Nullable<long> cultureId)
        {
            var cultureIdParameter = cultureId.HasValue ?
                new ObjectParameter("CultureId", cultureId) :
                new ObjectParameter("CultureId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<TableColumns>("[SdlContext].[GetTableColumns](@CultureId)", cultureIdParameter);
        }
    
        [DbFunction("SdlContext", "GetTables")]
        public virtual IQueryable<Tables> GetTables(Nullable<long> cultureId)
        {
            var cultureIdParameter = cultureId.HasValue ?
                new ObjectParameter("CultureId", cultureId) :
                new ObjectParameter("CultureId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Tables>("[SdlContext].[GetTables](@CultureId)", cultureIdParameter);
        }
    
        [DbFunction("SdlContext", "GetSettings")]
        public virtual IQueryable<Settings> GetSettings(Nullable<long> cultureId)
        {
            var cultureIdParameter = cultureId.HasValue ?
                new ObjectParameter("CultureId", cultureId) :
                new ObjectParameter("CultureId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Settings>("[SdlContext].[GetSettings](@CultureId)", cultureIdParameter);
        }
    }
}
